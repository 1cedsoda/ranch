/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.19.1
// source: chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ChatClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ChatPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CreateChatRequest,
 *   !proto.CreateChatResponse>}
 */
const methodDescriptor_Chat_CreateChat = new grpc.web.MethodDescriptor(
  '/Chat/CreateChat',
  grpc.web.MethodType.UNARY,
  proto.CreateChatRequest,
  proto.CreateChatResponse,
  /**
   * @param {!proto.CreateChatRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.CreateChatResponse.deserializeBinary
);


/**
 * @param {!proto.CreateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.CreateChatResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.CreateChatResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.createChat =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/CreateChat',
      request,
      metadata || {},
      methodDescriptor_Chat_CreateChat,
      callback);
};


/**
 * @param {!proto.CreateChatRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.CreateChatResponse>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.createChat =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/CreateChat',
      request,
      metadata || {},
      methodDescriptor_Chat_CreateChat);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetChatsRequest,
 *   !proto.GetChatsResponse>}
 */
const methodDescriptor_Chat_GetChats = new grpc.web.MethodDescriptor(
  '/Chat/GetChats',
  grpc.web.MethodType.UNARY,
  proto.GetChatsRequest,
  proto.GetChatsResponse,
  /**
   * @param {!proto.GetChatsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetChatsResponse.deserializeBinary
);


/**
 * @param {!proto.GetChatsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetChatsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetChatsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.getChats =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/GetChats',
      request,
      metadata || {},
      methodDescriptor_Chat_GetChats,
      callback);
};


/**
 * @param {!proto.GetChatsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetChatsResponse>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.getChats =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/GetChats',
      request,
      metadata || {},
      methodDescriptor_Chat_GetChats);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetChatsRequest,
 *   !proto.GetChatsResponse>}
 */
const methodDescriptor_Chat_StreamChats = new grpc.web.MethodDescriptor(
  '/Chat/StreamChats',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.GetChatsRequest,
  proto.GetChatsResponse,
  /**
   * @param {!proto.GetChatsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetChatsResponse.deserializeBinary
);


/**
 * @param {!proto.GetChatsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.GetChatsResponse>}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.streamChats =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Chat/StreamChats',
      request,
      metadata || {},
      methodDescriptor_Chat_StreamChats);
};


/**
 * @param {!proto.GetChatsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.GetChatsResponse>}
 *     The XHR Node Readable Stream
 */
proto.ChatPromiseClient.prototype.streamChats =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Chat/StreamChats',
      request,
      metadata || {},
      methodDescriptor_Chat_StreamChats);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetChatMessagesRequest,
 *   !proto.GetChatMessagesResponse>}
 */
const methodDescriptor_Chat_GetChatMessages = new grpc.web.MethodDescriptor(
  '/Chat/GetChatMessages',
  grpc.web.MethodType.UNARY,
  proto.GetChatMessagesRequest,
  proto.GetChatMessagesResponse,
  /**
   * @param {!proto.GetChatMessagesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetChatMessagesResponse.deserializeBinary
);


/**
 * @param {!proto.GetChatMessagesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetChatMessagesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetChatMessagesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.getChatMessages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/GetChatMessages',
      request,
      metadata || {},
      methodDescriptor_Chat_GetChatMessages,
      callback);
};


/**
 * @param {!proto.GetChatMessagesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetChatMessagesResponse>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.getChatMessages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/GetChatMessages',
      request,
      metadata || {},
      methodDescriptor_Chat_GetChatMessages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SetChatTitleRequest,
 *   !proto.SetChatTitleResponse>}
 */
const methodDescriptor_Chat_SetChatTitle = new grpc.web.MethodDescriptor(
  '/Chat/SetChatTitle',
  grpc.web.MethodType.UNARY,
  proto.SetChatTitleRequest,
  proto.SetChatTitleResponse,
  /**
   * @param {!proto.SetChatTitleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SetChatTitleResponse.deserializeBinary
);


/**
 * @param {!proto.SetChatTitleRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.SetChatTitleResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.SetChatTitleResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.setChatTitle =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/SetChatTitle',
      request,
      metadata || {},
      methodDescriptor_Chat_SetChatTitle,
      callback);
};


/**
 * @param {!proto.SetChatTitleRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.SetChatTitleResponse>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.setChatTitle =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/SetChatTitle',
      request,
      metadata || {},
      methodDescriptor_Chat_SetChatTitle);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AddMessageRequest,
 *   !proto.AddMessageResponse>}
 */
const methodDescriptor_Chat_AddMessage = new grpc.web.MethodDescriptor(
  '/Chat/AddMessage',
  grpc.web.MethodType.UNARY,
  proto.AddMessageRequest,
  proto.AddMessageResponse,
  /**
   * @param {!proto.AddMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.AddMessageResponse.deserializeBinary
);


/**
 * @param {!proto.AddMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.AddMessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.AddMessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatClient.prototype.addMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Chat/AddMessage',
      request,
      metadata || {},
      methodDescriptor_Chat_AddMessage,
      callback);
};


/**
 * @param {!proto.AddMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.AddMessageResponse>}
 *     Promise that resolves to the response
 */
proto.ChatPromiseClient.prototype.addMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Chat/AddMessage',
      request,
      metadata || {},
      methodDescriptor_Chat_AddMessage);
};


module.exports = proto;

